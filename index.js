require('dotenv').config();
const { Client, GatewayIntentBits, EmbedBuilder, PermissionsBitField } = require('discord.js');
const { joinVoiceChannel, createAudioPlayer, createAudioResource, AudioPlayerStatus } = require('@discordjs/voice');
const play = require('play-dl');
const ytSearch = require('yt-search');

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMembers,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.GuildVoiceStates
    ]
});

let autorole = null;
const welcomeChannelId = '1300542861552517171';
const player = createAudioPlayer();

client.once('ready', () => {
    console.log('‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡πÅ‡∏•‡πâ‡∏ß!');
});

// Welcome Message
const welcomeMessage = member => `‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö ${member} ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå! üéâ ‡πÇ‡∏õ‡∏£‡∏î‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡∏∞‡∏™‡∏ô‡∏∏‡∏Å‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ô!`;

client.on('guildMemberAdd', async member => {
    const welcomeChannel = member.guild.channels.cache.get(welcomeChannelId);
    if (welcomeChannel) {
        welcomeChannel.send(welcomeMessage(member));
    }

    try {
        await member.send(`‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö ${member.user.tag} ‡∏™‡∏π‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå! ‡∏´‡∏ß‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏™‡∏ô‡∏∏‡∏Å‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà`);
    } catch (error) {
        console.error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á DM ‡πÉ‡∏´‡πâ ${member.user.tag}`);
    }

    if (autorole) {
        const role = member.guild.roles.cache.find(r => r.name === autorole);
        if (role) {
            await member.roles.add(role).catch(console.error);
        } else {
            console.log(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏¢‡∏®‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡πà‡∏≤ "${autorole}"`);
        }
    }
});

client.on('messageCreate', async message => {
    // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á
    if (message.content.startsWith('!play')) {
        const args = message.content.split(' ').slice(1);
        const songName = args.join(' ');

        if (!songName) return message.channel.send('‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á‡∏´‡∏£‡∏∑‡∏≠ URL ‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á !play');

        if (!message.member.voice.channel) {
            return message.channel.send('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á !play');
        }

        try {
            const result = await ytSearch(songName);
            if (result.videos.length === 0) return message.channel.send('‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£');

            const song = result.videos[0];
            message.channel.send(`üé∂ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô: ${song.title}`);

            const stream = await play.stream(song.url);
            const resource = createAudioResource(stream.stream, {
                inputType: stream.type,
            });

            player.play(resource);

            const connection = joinVoiceChannel({
                channelId: message.member.voice.channel.id,
                guildId: message.guild.id,
                adapterCreator: message.guild.voiceAdapterCreator,
            });
            connection.subscribe(player);

            player.on(AudioPlayerStatus.Playing, () => {
                console.log('‡∏ö‡∏≠‡∏ó‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß');
            });

            player.on('error', error => {
                console.error(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á: ${error.message}`);
                message.channel.send('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á');
            });
        } catch (error) {
            console.error(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`);
            message.channel.send('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ');
        }
    }

    // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏û‡∏•‡∏á
    if (message.content === '!stop') {
        player.stop();
        message.channel.send('üõë ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß');
    }

    // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á !sent ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    if (message.content.startsWith('!sent')) {
        const userMessage = message.content.slice(6).trim();
        if (userMessage) {
            message.channel.send(userMessage);
        } else {
            message.channel.send('‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á !sent');
        }
        await message.delete();
    }

    // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á !clear ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    if (message.content === '!clear') {
        if (!message.member.permissions.has(PermissionsBitField.Flags.ManageMessages)) {
            return message.reply('‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°');
        }

        try {
            await message.channel.bulkDelete(100, true);
            message.channel.send('Success ‚ôªÔ∏è').then(msg => {
                setTimeout(() => msg.delete(), 3000);
            });
        } catch (error) {
            console.error(error);
            message.channel.send('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°');
        }
    }

    // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á !autorole ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏¢‡∏®‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    if (message.content.startsWith('!autorole')) {
        const roleName = message.content.slice(10).trim();
        if (!roleName) {
            return message.channel.send('‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏®‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á !autorole');
        }

        autorole = roleName;
        message.channel.send(`‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Autorole ‡πÄ‡∏õ‡πá‡∏ô "${autorole}" ‡πÅ‡∏•‡πâ‡∏ß`).then(msg => {
            setTimeout(() => msg.delete(), 3000);
        });
        await message.delete();
    }

    // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á !deautorole ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏¢‡∏®‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    if (message.content === '!deautorole') {
        autorole = null;
        message.channel.send('‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏¢‡∏®‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß').then(msg => {
            setTimeout(() => msg.delete(), 3000);
        });
        await message.delete();
    }

    // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á !server ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
    if (message.content.startsWith('!server')) {
        const args = message.content.split('|').map(arg => arg.trim()).slice(1);
        if (args.length < 6) {
            return message.channel.send('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: `!server | icon_url | name | image_url | Server IP | Link Discord | Guidelines`');
        }

        const [iconURL, name, imageURL, serverIP, discordLink, guidelines] = args;

        const isValidUrl = (url) => {
            try {
                new URL(url);
                return true;
            } catch (error) {
                return false;
            }
        };

        if (!isValidUrl(iconURL) || !isValidUrl(imageURL)) {
            return message.channel.send('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà URL ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö icon_url ‡πÅ‡∏•‡∏∞ image_url');
        }

        const formattedName = `[ ${name.toUpperCase()} ]`;

        const embed = new EmbedBuilder()
            .setColor(0x9B59B6)
            .setDescription(`**IP :  [ ${serverIP} ]**\n**Link : [ ${discordLink} ]**\n**Guide : [ ${guidelines} ]**`)
            .setAuthor({
                name: formattedName,
                iconURL: iconURL
            })
            .setImage(imageURL);

        await message.channel.send({ embeds: [embed] });
        await message.delete();
    }
});

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á
player.on(AudioPlayerStatus.Idle, () => {
    console.log('‡πÄ‡∏û‡∏•‡∏á‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß');
});

client.login(process.env.DISCORD_TOKEN);
